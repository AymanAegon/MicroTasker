{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 124, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/cloudinary.ts"],"sourcesContent":["import { v2 as cloudinary } from 'cloudinary';\n\ncloudinary.config({\n  cloud_name: 'drmmom6jz', // Replace with your cloud name\n  api_key: '979849212482131', // Replace with your API key\n  api_secret: 'oSpF1WJkGcU86dPJjifRa_KxDFw', // Replace with your API secret\n  secure: true,\n});\n\nexport default cloudinary;\n"],"names":[],"mappings":";;;AAAA;;AAEA,0IAAA,CAAA,KAAU,CAAC,MAAM,CAAC;IAChB,YAAY;IACZ,SAAS;IACT,YAAY;IACZ,QAAQ;AACV;uCAEe,0IAAA,CAAA,KAAU","debugId":null}},
    {"offset": {"line": 142, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/upload/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport cloudinary from '@/lib/cloudinary'; // Import your Cloudinary configuration\n\nexport async function POST(request: NextRequest) {\n  try {\n    const data = await request.formData();\n    const file = data.get('file') as File;\n\n    if (!file) {\n      return NextResponse.json({ error: 'No file provided' }, { status: 400 });\n    }\n    // Convert the file to a Buffer\n    const bytes = await file.arrayBuffer();\n    const buffer = Buffer.from(bytes);\n    // Upload the image to Cloudinary\n    const result = await new Promise((resolve, reject) => {\n      cloudinary.uploader\n        .upload_stream(\n          { resource_type: 'image' },\n          (error, result) => {\n            if (error) {\n              console.error('Cloudinary upload error:', error);\n              reject(error);\n            } else {\n              resolve(result);\n            }\n          }\n        )\n        .end(buffer);\n    });\n    return NextResponse.json(result, { status: 200 });\n  } catch (error) {\n    console.error('Server error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA,sNAA2C,uCAAuC;;;AAE3E,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,QAAQ;QACnC,MAAM,OAAO,KAAK,GAAG,CAAC;QAEtB,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAmB,GAAG;gBAAE,QAAQ;YAAI;QACxE;QACA,+BAA+B;QAC/B,MAAM,QAAQ,MAAM,KAAK,WAAW;QACpC,MAAM,SAAS,OAAO,IAAI,CAAC;QAC3B,iCAAiC;QACjC,MAAM,SAAS,MAAM,IAAI,QAAQ,CAAC,SAAS;YACzC,0HAAA,CAAA,UAAU,CAAC,QAAQ,CAChB,aAAa,CACZ;gBAAE,eAAe;YAAQ,GACzB,CAAC,OAAO;gBACN,IAAI,OAAO;oBACT,QAAQ,KAAK,CAAC,4BAA4B;oBAC1C,OAAO;gBACT,OAAO;oBACL,QAAQ;gBACV;YACF,GAED,GAAG,CAAC;QACT;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,QAAQ;YAAE,QAAQ;QAAI;IACjD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iBAAiB;QAC/B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}